;; -*- mode: lisp -*-

(defwidget bar []
  (box :orientation "h" 
       (time)
       (workspaces)
       (sidestuff)
   ))

(defpoll hour :interval "10s" "date +%H")
(defpoll min  :interval "10s" "date +%M")
(defwidget time []
  (box :class "time"
       :halign "start"
       (button :onclick "scripts/popup calendar 1" 
               (box :orientation "h"
                    :space-evenly false
                    hour ":" min)
       )
  )
)

(defwidget sidestuff []
  (box :class "sidestuff"
       :space-evenly true
       :halign "end"
       (box :space-evenly false :halign "end" (systray :orientation "h" :space-evenly false :spacing 8 :icon-size 20))
       (network)
       (metric :label {audio == "on" ? "󰕾" : "󰖁"}
               :value volume
               :class {audio == "on" ? "volume" : "volume-mute"}
               :onchange "amixer sset Master {}%")
       (metric :label "󰁹"
               :value {EWW_BATTERY.BAT1.capacity}
               :class "battery"
               :onchange "")
  ))

(deflisten workspaces "scripts/workspaces")
(defwidget workspaces []
  (box :orientation "h" :class "button"
       :space-evenly false
       :halign "center"
       (for entry in { workspaces ?: "[]" }
         (button
           :onclick "hyprctl dispatch workspace ${entry.id}"
  
           :class "${entry.monitor} ${ 
             entry.id == entry.active ? "wsp-${entry.monitor}-active"
             : (entry.windows >= 1 ? "wsp-${entry.monitor}-inactive" 
               : "wsp-empty")
           }"
  
           { entry.name }
         )
       )
  )
)


(defwidget metric [label value onchange class]
  (box :orientation "h"
       :class class
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :flipped false 
           :orientation "h" 
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defpoll volume :interval "0.5s"
  "amixer sget Master | awk -F '[^0-9]+' '/Left:/ && !/Rear/ && !/Side/ {print $3}'")

(defpoll audio :interval "0.5s"
  "scripts/ismute")

(defpoll net :interval "2s" "scripts/network")
(defwidget network []
    (box :class "network"
         :orientation "h"
         (button
          :onclick "networkmanager_dmenu" 
          {net == "null" ? "󰤭" : 
            net.network == "eth" ? "󰈀" :
            (net.network == "wifi" ?
            (net.conn > 0.75 ? "󰤨" :
            (net.conn > 0.50 ? "󰤥" :
            (net.conn > 0.25 ? "󰤢" : "󰤟")))
            : "󰤭")}
         )
     )
)

(defwindow bar-main []
  :monitor 1
  :windowtype "dock"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "40px"
                      :anchor "top center")
  (bar))

(defwindow bar-laptop []
  :monitor 0
  :windowtype "dock"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "40px"
                      :anchor "top center")
  (bar))

(include "calendar.yuck")
